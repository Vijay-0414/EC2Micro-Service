name: Microservices Deploy using ECS with FARGATE

on:
  workflow_dispatch:
    inputs:
      deploy_service1:  #service1
        type: boolean
        default: false
      deploy_service2:  #service2
        type: boolean
        default: false
      deploy_service3:  #service3
        type: boolean
        default: false


jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: EC2_Micro_Cluster

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    - name: Github Workspace
      run: echo ${{ github.workspace }}

    - name: Confirm git commit SHA output
      run: echo ${{ env.COMMIT_SHORT_SHA }}

    # TEST + BUILD ONLY SELECTED SERVICES
    - name: Test & build selected services
      run: |
        if [ "${{ inputs.deploy_service1 }}" == "true" ]; then
          cd service-1 && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_service2 }}" == "true" ]; then
          cd service-2 && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_service3 }}" == "true" ]; then
          cd service-3 && mvn test && mvn package -DskipTests && cd ..
        fi


    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{secrets.AWS_REGION}}


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
          
    - name: Build and Push Docker Images
      run: |  
        build_push() {
          local SERVICE=$1
          local SERVICE_PATH=$2
          docker build -t ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} $SERVICE_PATH
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }}
          docker tag ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest        
        }

        if [ "${{ inputs.deploy_service1 }}" == "true" ]; then
          build_push service_one service-1
        fi
        if [ "${{ inputs.deploy_service2 }}" == "true" ]; then
          build_push service_two service-2
        fi
        if [ "${{ inputs.deploy_service3 }}" == "true" ]; then
          build_push service_three service-3
        fi        

    - name: Create ECS cluster if not exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --region ${{secrets.AWS_REGION}} --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")
        
        if [ "$CLUSTER_EXISTS" = "MISSING" ] || [ "$CLUSTER_EXISTS" = "INACTIVE" ] || [ "$CLUSTER_EXISTS" = "None" ]; then
          echo "$CLUSTER_NAME Cluster not found. Creating $CLUSTER_NAME ECS cluster..."
          aws ecs create-cluster --cluster-name $CLUSTER_NAME --region ${{secrets.AWS_REGION}}
        else
          echo "ECS cluster '$CLUSTER_NAME' already exists."
        fi

    - name: Deploy Services
      run: |
        deploy_service() {
          local SERVICE_NAME=$1
          local TASK_NAME=$2
          local IMAGE=$3
          local DEF_FILE=$4

          echo "Deploying $SERVICE_NAME using image $IMAGE"

          sed "s|REPLACE_ME|$IMAGE|g" ecs-task-definitions/$DEF_FILE > final-task-def.json
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          # Keep only last 3 revisions
          OLD_REVISIONS=$(aws ecs list-task-definitions --family-prefix $TASK_NAME --status ACTIVE --sort DESC --query 'taskDefinitionArns[1:]' --output text)
          for TD_ARN in $OLD_REVISIONS; do
            aws ecs deregister-task-definition --task-definition $TD_ARN
          done

          SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].status" --output text 2>/dev/null || echo "MISSING")

          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Service exists. Checking for running tasks..."
            TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text)

            if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "null" ]; then
              echo "Stopping task: $TASK_ARN"
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN
            else
              echo "No running tasks found for service."
            fi
          else
            echo "Creating ECS service..."
            aws ecs create-service --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --task-definition $TASK_DEF_ARN --desired-count 1 --launch-type EC2 --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
          fi

          echo "Updating Service"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEF_ARN --force-new-deployment

        }

        if [ "${{ inputs.deploy_service1 }}" == "true" ]; then
          deploy_service first-service service1-task-family ${{ secrets.ECR_REGISTRY }}/service_one:${{ env.COMMIT_SHORT_SHA }} service1-task-def.json
        fi
        if [ "${{ inputs.deploy_service2 }}" == "true" ]; then
          deploy_service second-service service2-task-family ${{ secrets.ECR_REGISTRY }}/service_two:${{ env.COMMIT_SHORT_SHA }} service2-task-def.json
        fi
        if [ "${{ inputs.deploy_service3 }}" == "true" ]; then
          deploy_service third-service service3-task-family ${{ secrets.ECR_REGISTRY }}/service_three:${{ env.COMMIT_SHORT_SHA }} service3-task-def.json
        fi
