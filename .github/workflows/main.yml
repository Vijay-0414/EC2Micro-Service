name: Microservices Deploy using ECS with FARGATE + ALB

on:
  workflow_dispatch:
    inputs:
      deploy_service1:
        type: boolean
        default: false
      deploy_service2:
        type: boolean
        default: false
      deploy_service3:
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    env:
      CLUSTER_NAME: Fargate_Micro_Cluster
      VPC_ID: ${{ secrets.AWS_VPC_ID }}
      SUBNETS_ALB: ${{ secrets.AWS_SUBNETS_ALB }}   
      SUBNETS_ECS: ${{ secrets.AWS_SUBNETS_ECS }}   
      SECURITY_GROUPS: ${{ secrets.AWS_SG_ALB }}
      SECURITY_GROUPS_ECS: ${{ secrets.AWS_SG_ECS }} 

      PORT_SERVICE1: 8080
      PORT_SERVICE2: 8081
      PORT_SERVICE3: 8082
    

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    - name: Github Workspace
      run: echo ${{ github.workspace }}

    - name: Confirm git commit SHA output
      run: echo ${{ env.COMMIT_SHORT_SHA }}

    # TEST + BUILD ONLY SELECTED SERVICES
    - name: Test & build selected services
      run: |
        if [ "${{ inputs.deploy_service1 }}" == "true" ]; then
          cd service-1 && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_service2 }}" == "true" ]; then
          cd service-2 && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_service3 }}" == "true" ]; then
          cd service-3 && mvn test && mvn package -DskipTests && cd ..
        fi


    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{secrets.AWS_REGION}}


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
          
    - name: Build and Push Docker Images
      run: |  
        build_push() {
          local SERVICE=$1
          local SERVICE_PATH=$2
          docker build -t ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} $SERVICE_PATH
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }}
          docker tag ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest        
        }

        if [ "${{ inputs.deploy_service1 }}" == "true" ]; then
          build_push service_one service-1
        fi
        if [ "${{ inputs.deploy_service2 }}" == "true" ]; then
          build_push service_two service-2
        fi
        if [ "${{ inputs.deploy_service3 }}" == "true" ]; then
          build_push service_three service-3
        fi 

