AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate Cluster for 3 Microservices

Parameters:
  VpcId:
    Type: String
  SubnetOne:
    Type: String
  SubnetTwo:
    Type: String
  SecurityGroup:
    Type: String

  # Docker image URIs for each service
  Service1Image:
    Type: String
  Service2Image:
    Type: String
  Service3Image:
    Type: String

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: microservices-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ---------------- 1. Service1 ----------------
  Service1TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: service1-task-family
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: service1-container
          Image: !Ref Service1Image
          PortMappings:
            - ContainerPort: 8080
          Essential: true

  Service1Service:
    Type: AWS::ECS::Service
    DependsOn: TaskExecutionRole
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: service1-service
      TaskDefinition: !Ref Service1TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref SecurityGroup]
          Subnets: [!Ref SubnetOne, !Ref SubnetTwo]

  # ---------------- 2. Service2 ----------------
  Service2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: service2-task-family
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: service2-container
          Image: !Ref Service2Image
          PortMappings:
            - ContainerPort: 8081
          Essential: true

  Service2Service:
    Type: AWS::ECS::Service
    DependsOn: TaskExecutionRole
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: service2-service
      TaskDefinition: !Ref Service2TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref SecurityGroup]
          Subnets: [!Ref SubnetOne, !Ref SubnetTwo]

  # ---------------- 3. Service3 ----------------
  Service3TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: service3-task-family
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: service3-container
          Image: !Ref Service3Image
          PortMappings:
            - ContainerPort: 8082
          Essential: true

  Service3Service:
    Type: AWS::ECS::Service
    DependsOn: TaskExecutionRole
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: service3-service
      TaskDefinition: !Ref Service3TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref SecurityGroup]
          Subnets: [!Ref SubnetOne, !Ref SubnetTwo]

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
  Service1ARN:
    Description: ECS Service 1 ARN
    Value: !Ref Service1Service
  Service2ARN:
    Description: ECS Service 2 ARN
    Value: !Ref Service2Service
  Service3ARN:
    Description: ECS Service 3 ARN
    Value: !Ref Service3Service
